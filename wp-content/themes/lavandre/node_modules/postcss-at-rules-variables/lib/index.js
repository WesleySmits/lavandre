"use strict";function hasVar(string){return string.includes("var(")}function resolveValue(value,maps){return hasVar(value)?value.replace(/var\(--.*?\)/g,match=>maps[match.slice(4,-1)]||match):value}function circularReference(maps){return Object.keys(maps).reduce((previousMaps,property)=>(previousMaps[property]=resolveValue(maps[property],maps),previousMaps),maps)}function getProperty(nodes){let propertys={};return nodes.walkRules(rule=>{":root"!==rule.selector||rule.each(({type,prop:property,value})=>{"decl"===type&&(propertys[property]=value)})}),propertys}module.exports=(options={})=>{var _options$declarationB;return options={atRules:[...new Set(["for","if","else","each","mixin","custom-media",...(options.atRules||"")])],variables:{...options.variables},declarationByWalk:null!==(_options$declarationB=options.declarationByWalk)&&void 0!==_options$declarationB&&_options$declarationB},{postcssPlugin:"postcss-at-rules-variables",prepare(){let variables={};return{Declaration(node){node.variable&&(variables[node.prop]=node.value)},Once(root){let declarativeVariables=variables;options.declarationByWalk&&(declarativeVariables=getProperty(root)),variables=circularReference(Object.assign(declarativeVariables,options.variables))},AtRule(rule){options.atRules.includes(rule.name)&&(rule.params=resolveValue(rule.params,variables))}}}}},module.exports.postcss=!0;